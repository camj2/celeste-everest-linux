#!/bin/sh

API=https://dev.azure.com/EverestAPI/Everest/_apis/build/builds
API_VERSION=7.0

TMP="${XDG_RUNTIME_DIR:-/tmp}/celeste-everest-linux"

env_check() {
  for bin in jq awk sed curl unzip rsync; do
    if ! command -v "$bin" > /dev/null 2>&1; then
      printf "program '%s' not found\n" "$bin" 1>&2
      exit 1
    fi
  done

  if [ ! -x Celeste ]; then
    printf "executable '%s/Celeste' not found\n" "$(pwd)" 1>&2
    exit 1
  fi

  if [ -e "$TMP" ]; then
    printf "directory '%s' already exists\n" "$TMP" 1>&2
    exit 1
  fi
}

azure_parse() {
  # https://github.com/leo60228/everinst/blob/master/src/updater.rs
  curl -s "${API}?api-version=${API_VERSION}" |
    jq -r '.value[] |
      .sourceBranch + " " +
      .status + " " +
      .result + " " +
      .reason + " " +
      (.id|tostring)' |
    awk '$1 != "refs/heads/core"' |
    awk '$2 == "completed"' |
    awk '$3 == "succeeded"' |
    awk '$4 == "manual" || $4 == "individualCI"' |
    awk '{print $5 " " $1}' |
    sed 's#refs/heads/##g'
}

everest_install() {
  trap 'rm -rf "$TMP"' HUP INT TERM

  install -d -m 700 "$TMP"

  curl -fsSL -o "$TMP/everest.zip" \
    "${API}/${1}/artifacts?artifactName=main&api-version=7.0&%24format=zip" || exit

  unzip -q -d "$TMP/everest" "$TMP/everest.zip"

  rsync -aAX --checksum "$TMP/everest/main/" ./

  rm -rf "$TMP"

  chmod +x MiniInstaller-linux

  ./MiniInstaller-linux

  [ ! -e Celeste.bin.x86_64 ] && ln -s Celeste Celeste.bin.x86_64
}

everest_install_branch() {
  version=$(azure_parse | awk -v branch="$1" '$2 == branch {print $1; exit}')

  if [ -z "$version" ]; then
    printf "failed to parse Azure API\n" 1>&2
    exit 1
  fi

  everest_install "$version"
}

RST='\033[0;00m'
GRN='\033[0;32m'
GLD='\033[0;33m'

usage() {
  printf "%b\n" "${GLD}USAGE${RST}:"
  printf "%s\n" "    $(basename "$0") [BRANCH]"
  printf "\n"
  printf "%b\n" "${GLD}BRANCHES${RST}:"
  printf "%b\n" "    ${GRN}s${RST}, ${GRN}stable${RST}"
  printf "%b\n" "    ${GRN}b${RST}, ${GRN}beta${RST}"
  printf "%b\n" "    ${GRN}d${RST}, ${GRN}dev${RST}"
}

case $1 in
  s | stable)
    env_check
    everest_install_branch stable
    ;;

  b | beta)
    env_check
    everest_install_branch beta
    ;;

  d | dev)
    env_check
    everest_install_branch dev
    ;;

  h | -h | help | --help | "")
    usage
    ;;

  *)
    printf "%s: invalid branch -- '%s'\n" "$(basename "$0")" "$1" 1>&2
    exit 1
    ;;
esac
