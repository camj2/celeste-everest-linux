#!/bin/sh

DIR='.'
TMP="${XDG_RUNTIME_DIR:-/tmp}/.everest"

MOD_API='https://dev.azure.com/EverestAPI/Everest/_apis/build/builds'
MOD_API_VERSION='7.1'

MOD_BRANCH='stable'
MOD_VERSION=

mod_api() {
  curl -fsSL "${MOD_API}?api-version=${MOD_API_VERSION}" |
    jq -r '.value[] | select(
        (.status == "completed" and .result == "succeeded") and
        (.reason == "manual" or .reason == "individualCI")
      ) | (.id | tostring) + " " + (.sourceBranch | sub("refs/heads/"; ""))'
}

mod_install() {
  (
    set -e

    trap 'rm -rf "$TMP"; die "received interrupt"' HUP INT TERM

    mkdir -m 700 "$TMP"

    msg "downloading everest version '${1}'..."

    curl -fsSL -o "${TMP}/everest.zip" \
      "${MOD_API}/${1}/artifacts?artifactName=main&api-version=${MOD_API_VERSION}&%24format=zip"

    unzip -q -d "${TMP}/everest" "${TMP}/everest.zip"

    rsync -a "${TMP}/everest/main/" ./

    msg "installing everest version '${1}'..."

    chmod +x MiniInstaller-linux

    ./MiniInstaller-linux > /dev/null

    ln -ns Celeste Celeste.bin.x86_64
  )

  ret=$?

  rm -rf "$TMP"

  if [ $ret -eq 0 ]; then
    msg "done!"
  else
    die "fail!"
  fi
}

mod_install_branch() {
  _version=$(mod_api | awk -v branch="$1" '$2 == branch {print $1; exit}')
  mod_install "$_version"
}

pkg() {
  _cmd=$(command -v "$1")
  [ -x "$_cmd" ]
}

msg() {
  printf '%b=> %s: %s%b\n' '\033[0;01m' "${0##*/}" "$*" '\033[0;00m'
}

die() {
  printf '%b=> %s: %s%b\n' '\033[1;31m' "${0##*/}" "$*" '\033[0;00m' >&2
  exit 1
}

while getopts g:b:v:l opt; do
  case $opt in
    g)
      DIR="$OPTARG"
      ;;
    b)
      case $OPTARG in
        stable | beta | dev)
          MOD_BRANCH="$OPTARG"
          ;;
        *)
          die "unknown branch"
          ;;
      esac
      ;;
    v)
      MOD_VERSION="$OPTARG"
      ;;
    l)
      mod_api
      exit $?
      ;;
    *)
      die "unknown option"
      ;;
  esac
done

if ! cd -- "$DIR"; then
  die "directory '$DIR': not found"
fi

if [ ! -x Celeste ]; then
  die "executable 'Celeste': not found"
fi

if [ -e "$TMP" ]; then
  die "directory '$TMP': already exists"
fi

if ! pkg jq; then
  die "jq not installed"
fi

if ! pkg awk; then
  die "awk not installed"
fi

if ! pkg curl; then
  die "curl not installed"
fi

if ! pkg rsync; then
  die "rsync not installed"
fi

if ! pkg unzip; then
  die "unzip not installed"
fi

if [ -n "$MOD_VERSION" ]; then
  mod_install "$MOD_VERSION"
else
  mod_install_branch "$MOD_BRANCH"
fi

exit 0
