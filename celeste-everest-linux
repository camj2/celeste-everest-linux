#!/bin/sh

API=https://dev.azure.com/EverestAPI/Everest/_apis/build/builds
API_VERSION=7.1

TMP="${XDG_RUNTIME_DIR:-/tmp}/celeste-everest-linux"

env_check() {
  if ! command -v jq > /dev/null; then
    die "jq not installed"
  fi

  if [ ! -x Celeste ]; then
    die "executable 'Celeste': not found"
  fi

  if [ -e "$TMP" ]; then
    die "directory '$TMP': already exists"
  fi
}

azure_parse() {
  # https://github.com/leo60228/everinst/blob/master/src/updater.rs
  curl -s "${API}?api-version=${API_VERSION}" |
    jq -r '.value[] | select(
        (.status == "completed" and .result == "succeeded") and
        (.reason == "manual" or .reason == "individualCI")
      ) | (.id | tostring) + " " + (.sourceBranch | sub("refs/heads/"; ""))'
}

everest_install() {
  trap 'rm -rf "$TMP"; exit 1' HUP INT TERM

  install -d -m 700 "$TMP"

  (
    set -ex # -x, optional

    curl -s -o "$TMP/everest.zip" \
      "${API}/${1}/artifacts?artifactName=main&api-version=${API_VERSION}&%24format=zip"

    unzip -q -d "$TMP/everest" "$TMP/everest.zip"

    rsync -aAX --checksum "$TMP/everest/main/" ./

    chmod +x MiniInstaller-linux

    ./MiniInstaller-linux

    ln -s Celeste Celeste.bin.x86_64 # optional
  )
  ret=$?

  rm -rf "$TMP"

  exit $ret
}

everest_install_branch() {
  version=$(azure_parse | awk -v branch="$1" '$2 == branch {print $1; exit}')

  everest_install "$version"
}

die() {
  printf "celeste-everest-linux: %s\n" "$*" >&2
  exit 1
}

RST='\033[0;00m'
GRN='\033[0;32m'
YLW='\033[0;33m'

usage() {
  printf "%b\n" "${YLW}USAGE${RST}:"
  printf "%s\n" "    celeste-everest-linux [BRANCH]"
  printf "\n"
  printf "%b\n" "${YLW}BRANCHES${RST}:"
  printf "%b\n" "    ${GRN}s${RST}, ${GRN}stable${RST}"
  printf "%b\n" "    ${GRN}b${RST}, ${GRN}beta${RST}"
  printf "%b\n" "    ${GRN}d${RST}, ${GRN}dev${RST}"
}

case $1 in
  s | stable)
    env_check
    everest_install_branch stable
    ;;

  b | beta)
    env_check
    everest_install_branch beta
    ;;

  d | dev)
    env_check
    everest_install_branch dev
    ;;

  *)
    usage >&2
    ;;
esac
